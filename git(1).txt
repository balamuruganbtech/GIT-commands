Migration SVN to GIT
--------------------------

SVN to Local Folder
-------------------
* git svn clone http://baselinesvn.mc2.renault.fr:9090/svn/svn51323/branches/dmd-V10.0.0-b


Local to GIT repo first time
------------------------------
* git remote add origin https://gitlab.intra.renault.fr/irn-51323/DMD.git 
* git push -u origin --all 
* git push -u origin --tags 

Clone workspace for first time from GIT
-----------------------------------------
* git config --global http.proxy http://z023421:rntbci92@138.21.89.192:3128 
* git -c http.sslVerify=false clone -b develop https://gitlabee.dt.renault.com/IRN-13225/peq.git

If the above approach throws Authentication Failed Error then,
----------------------------------------------------------------
* git config --system --unset credential.helper
* After this command go to GitLab and click on Profile---->Access Tokens.
* Give a name for the Token, select the scope as api and click on Create personal access token button.
* Save the generated token in a file since every time we would need to input the token as password on doing this approach.
* git -c http.sslVerify=false clone -b develop https://gitlabee.dt.renault.com/IRN-13225/peq.git 
* Give the username as your zid. Password would be the token that was generated in the previous step.


Setting Proxy
--------------
*  git config --global http.proxy http:// z023421: rntbci92@138.21.89.192:3128
* git config --global https.proxy https:// z023421: rntbci92@138.21.89.192:3128


Git Commands:
-------------
git clone -b <future branch> https://gitlabee.dt.renault.com/IRN-13225/peq.git
git pull(=git fetch +git merge,to update the workspace with latest changes)
git stash(saves the current working files on a new stack and will not commit the changes so that we can switch to work on other branches to work)
git stash list (lists the stashes that has been done)
git stash apply <stash_id> (to bring a stash to current working directory)
git pull --rebase(=git fetch +git merge,if there is only one branch in a project)
git merge origin/develop (merges the code from develop to origin branch)
git status (to know the changes done)
git add <file_names> (to add the files to git repository)
git push (pushes the file into git repository)
git commit (commits the pushed files into git repository)
git revert --filename (Reverts the local changes in the file and updates the file from master)
git revert --hard (Reverts all the local changes done)
git checkout -b develop (Pulls the files from Developer branch when we are actually working on another branch)




--------------------------------------------------------------------srinivas------------------
git init -----------> initialize local git repository [creates the .git folder in local repository]
git add <file>  ----> add file to index
git status   -------> check the status of working tree
git commit  --------> commit changes in index
git push  ----------> push to remote repository
git pull    --------> pull latest changes from repository
git clone ----------> Clone repository into a new directory


git --version ------> To get the git version
touch <filename.extention>--> creates the file  Ex: touch index.html
git init 
git config --global user.name 'Srinivas Ruttala'             ---> add name to git 
git config --global user.email 'ruttala.srinivas@outlook.com'---> add email to git
git add <filename.ext>---> to add the file 
git add <*.html> ---> all .html extension files to be added.
git add . ------------> to add every file
git status  --------> to get status of the file in the staging area
git rm --cached <filename.ext> ---> to remove the file from staging[ make the file as untracked]
git commit --------> it will open in editor mode
i    ---------------> to do edit
esc-> :wq-> enter ---> to come out from the editor mode.

note: change the file after commit and then add again and commit it 

git commit -m 'comment'  --> to skip the edit mode use like this


touch .gitignore   ---> it will create the ignore file
touch log.txt    ---->  after that add some data in the text file.
touch add .

note : open the .gitignore file and add log.txt filename.and then see the git status .. i it will not show as the text file as no tracked file.it has ignored

note: crate two directrories dir1 and dir2 and add files in that directories. now see the git status ... 2 directories should be tracked.

note : now add /dir1 directory name in .gitignore file. and see the git status. it will not shole tracking needed for dir1 directory.

git add.
git status

note : even you can add *.txt in .gitignore file .. then it will ignore all text files.

git commit -m 'comment'

NOte : create the branch for developer 1

git branch <name of the branch>   --> to create the branch
git checkout <name of the branch> ---> to switch into the branch from master

touch dev1.html 

Note: add the file in dev branch and edit the file and edit index.html also  and 
git status
git add .
git status
git commit -m 'dev1 commit'

Note: see the diectory.now you can see all the file in directory along with dev1.html'

now switch to master branch.

git checkout master

now see the repositoy dev1.html and the changes you did in dev1Branch is gone.

you have only master branch image.

git merge dev1Branch ----> To merge dev1Branch changes to master.

now if you see in directory ..you can see the files and changes of dev1Brach in master.


git remote

Note : click on + on right side top cornet and select new repository--> then give name of new repository--> select public or private

now copy the git remote .... command from here

run in gitbash like

git remote add origin https://github.com/srinivas-ruttala-87/demoTest1.git

git remote
note : now add origin

git push -u origin master

if you find any proxy issues then use following 3 cmds 

git config --global --unset http.proxy
git config --global --unset https.proxy
git config --global --unset core.gitproxy

now see the code is added to remote repository


Note : to add readme.md file in remote repository

touch README.md

git add .
git comment -m 'README.md had added'

now you can not see this file in remote .. if you want to see you need to push this

git push

now you can see the file in remote.



some wants clone your repo then get the clone url from remote repo

git clone <repo url>


if multiple dev are working on it .. you wnat to get other dev changes. you need to go to origin folder.

git pull




------------------------------------------------------------------2nd day--------------



go to gitbash --

git version

create folder demo1  in local mechine and open it in gitbash

git init

touch master.txt

add data as "master commit 1"

git status

git add master.txt

git status

git commit 'master commit 1'

git remote add origin https://github.com/srinivas-ruttala-87/demo1.git

git push -u origin master



----------------------------------------------------------------------------------------
**/.svn







git clone -b 19.5 https://gitlabee.dt.renault.com/IRN-7736/icm.git
git clone -b 19.5_DEV3 https://IRN-7736:yEWNzvYy3nUD1A1YbgX4@gitlabee.dt.renault.com/IRN-7736/icm.git
 


yEWNzvYy3nUD1A1YbgX4 originaltoken
tRxoT4FBoY1N3NUrgiRh feedtoken


https://stackoverflow.com/questions/871/why-is-git-better-than-subversion
https://hackbrightacademy.com/blog/svn-vs-git/ 






